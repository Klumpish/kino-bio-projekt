(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function t(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(i){if(i.ep)return;i.ep=!0;const s=t(i);fetch(i.href,s)}})();class v{constructor(e){this.apiBackend=e}async CardGenerator(e=1){const t=document.querySelector(".movies__list");(await this.apiBackend.loadAllFilms()).sort((s,o)=>o.rating-s.rating).slice(0,e).forEach(s=>{const o=document.createElement("li");o.classList="movies__list-item";const a=document.createElement("article");a.classList="movie-card",a.setAttribute("aria-label",`${s.title}`);const l=document.createElement("img");l.classList="movie-card__image",l.src=`${s.image}`,l.alt=`Omslag för filmen ${s.title}`,l.setAttribute("aria-hidden","false");const u=document.createElement("h3");u.classList="movie-card__title",u.textContent=`${s.title}`;const c=document.createElement("time");c.classList="movie-card__date",c.setAttribute("aria-label",`Premiär ${s.date}`),c.textContent=`${s.date}`;const d=document.createElement("button");d.classList="movie-card__button",d.textContent="Boka biljett",d.setAttribute("aria-label","Boka biljett");const m=document.createElement("span");m.classList="movie-card__genre",m.textContent=`${s.genre}`,m.setAttribute("aria-label",`Genre: ${s.genre}`),a.appendChild(l),a.appendChild(u),a.appendChild(c),a.appendChild(m),a.appendChild(d),o.appendChild(a),t.appendChild(o)})}}class h{constructor(e){this.backend=e,this.films=[]}async add(e,t){try{t.style.display="block",(await this.backend.loadAllFilms()).forEach(i=>{const s=this.render(i);this.films.push(s),e.appendChild(s)})}catch(r){console.error("Error(trying to load film list):",r)}finally{t.style.display="none"}}render(e){const t=document.createElement("div");return t.classList.add("allmovies"),t.innerHTML=`
            <img src="${e.image}" class="allmovies__image"  alt="${e.title}">
            <h3 class="allmovies__title">${e.title} ${e.year}</h3>
            <p class="allmovies__desc">${e.desc}</p>
            <p class="allmovies__rating">Rating: ${e.rating}</p>
            <p class="allmovies__date">Datum: ${e.date}</p>
            <p class="allmovies__price">Pris: ${e.price}SEK</p>
            <p class="allmovies__seat">Platser: ${e.seatsAvailable}</p>
        `,t}}class p{constructor(e){this.apiUrl=e}async loadAllFilms(){const e=await fetch(this.apiUrl+"/movies");if(!e.ok)throw new Error(`Failed to fetch movies: ${e.statusText}`);const t=await e.json();return console.log(t),t}}document.addEventListener("DOMContentLoaded",()=>{const n=document.querySelector(".hamburger"),e=document.querySelector(".hamburger__items"),t=document.querySelector(".hamburger__close");n&&e&&n.addEventListener("click",()=>{e.classList.toggle("active"),n.classList.toggle("open")}),t&&t.addEventListener("click",()=>{e.classList.remove("active"),n.classList.remove("open")})});class f{constructor(e){this.apiPath=e}async fetchData(){try{return(await(await fetch(this.apiPath)).json()).liveEvents}catch(e){return console.error("Error fetching data:",e),[]}}}class g{constructor(e){this.container=document.querySelector(e)}createLiveEvent({title:e,description:t,image:r}){const i=document.createElement("li");return i.classList.add("live__list-item"),i.innerHTML=`
        <div class="live__list-item-image-wrapper">
                <img src="${r}" class="live__list-item-image" alt="${e}" />
            </div>
            <div class="live__list-item-title">
                <h3>${e}</h3>
                <button class="live__list-item-btn" aria-label="Book ticket to live event">BOKA</button>
            </div>
            <div class="live__list-item-description">
                <p>${t}</p>
            </div>
            `,i}renderLiveEvents(e){if(!this.container){console.error("Container element not found");return}if(!Array.isArray(e)||e.length===0){this.container.innerHTML="<p> No live events founds.</p>";return}this.container.innerHTML="";const t=document.createDocumentFragment();e.forEach(r=>{const i=this.createLiveEvent(r);t.appendChild(i)}),this.container.appendChild(t)}}async function _(){const n="./assets/json/liveEvents.json",e=new f(n),t=new g(".live__list");try{const r=await e.fetchData();t.renderLiveEvents(r)}catch(r){console.error("Error initializing live events:",r)}}if(document.querySelector(".movies__list-all")){const n=document.createElement("div");n.classList.add("loading-message"),n.innerText=`Api is starting
Loading movies... Please wait.`,document.querySelector(".loading-message").appendChild(n),n.style.display="none";const e=new p("https://kino-bio-projekt.onrender.com");console.log("Link to API:"+e),new h(e).add(document.querySelector(".movies__list-all"),n)}else{const n=new p("https://kino-bio-projekt.onrender.com");new v(n).CardGenerator(4)}document.addEventListener("DOMContentLoaded",_);
